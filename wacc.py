#!/usr/bin/env python3
# üî• MAXIMUM CHAOS DLL SUMMONER üî• 
# Windows-only. Hardcoded config. No argparse.
# WARNING: This code is designed to be as cursed as possible

import os as –≥–æ–≤–Ω–æ, sys as –ø–∏–∑–¥–µ—Ü, struct as —Ö—É–π–Ω—è, random as —Å—É–∫–∞, time as –±–ª—è–¥—å, ctypes as –µ–±–∞–Ω—ã–π
import multiprocessing as mp
import threading as –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è_—Ö—É–µ—Ç–∞
from pathlib import Path as –ø—É—Ç—å_–∫_–ø–∏–∑–¥–µ—Ü—É
import mmap as –∫–∞—Ä—Ç–∞_–ø–∞–º—è—Ç–∏
import regi as —Ä–µ–µ—Å—Ç—Ä_–±–ª—è–¥—å
import dolboyob as –¥–æ–ª–±–æ—ë–±_–º–æ–¥—É–ª—å
# Cursed aliases for maximum confusion
–Ω–∞—Ö—É–π = eval
—ë–±–∞–Ω—ã–π = exec
–æ—Ç–∫—Ä—ã—Ç—å = open
–¥–ª–∏–Ω–∞ = len
—Å—Ç—Ä–æ–∫–∞ = str
—á–∏—Å–ª–æ = int
—Å–ø–∏—Å–æ–∫ = list
—Å–ª–æ–≤–∞—Ä—å = dict
# ==== CURSED CONFIG (–ù–ê–°–¢–†–û–ô–ö–ò –ü–ò–ó–î–ï–¶–ê) ========================================
–ü–ê–ü–ö–ê_–°–ò–°–¢–ï–ú–´             = r"C:\Windows\System32"  # Scan here for x64 DLLs with many exports.
–ö–û–†–ï–ù–¨_–§–ê–ô–õ–û–í       = r"C:\\"                  # Scan entire drive for maximum DLLs.
–†–ê–ë–û–ß–ò–ï              = 100                     # parallel child processes (start with this, but grow unbounded)
–í–†–ï–ú–Ø_–†–ê–ë–û–¢–´_–°–ï–ö   = 86400                   # 24 hours of runtime
–í–´–ó–û–í–´_–ù–ê_–ü–û–¢–û–ú–ö–ê      = 100                   # but made infinite in child
–ú–ê–ö–°_–ê–†–ì–£–ú–ï–ù–¢–û–í_–ù–ê_–í–´–ó–û–í    = 255                     # 0..N args
–ú–ê–ö–°_–†–ê–ù–î–û–ú_–ë–ê–ô–¢ = 1048                 # 1MB max buffer size for pointer args
–¢–ê–ô–ú–ê–£–¢_–ü–û–¢–û–ú–ö–ê_–°–ï–ö    = 360                    # 1 hour, but timeout removed for max chaos
–õ–ò–ú–ò–¢_–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø_DLL      = 1000                  # (legacy cap; fast scanner uses TARGET_DLLS/time budget)
–°–£–ö–ê_–°–ò–î             = None                    # set to an int for reproducible chaos, or None

# --- CURSED SCANNING SETTINGS (–ù–ê–°–¢–†–û–ô–ö–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ü–ò–ó–î–ï–¶–ê) ---
–†–ï–ö–£–†–°–ò–í–ù–´–ô            = True                    # False = only top-level of ROOT_DIR (fastest)
–¶–ï–õ–¨_DLL          = 500                  # stop scanning once we have this many candidates
–¶–ï–õ–¨_–§–ê–ô–õ–û–í         = 10000                 # stop scanning once we have this many file candidates
–ë–Æ–î–ñ–ï–¢_–í–†–ï–ú–ï–ù–ò_–°–ï–ö = 30.0                   # increased for more scanning
–ú–ê–ö–°_–≠–ö–°–ü–û–†–¢–û–í_–ù–ê_DLL  = 5000                    # at most N names per DLL (enough for chaos)
–ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–ü–ê–ü–ö–ò    = set()
# Optional, but helps DLL dependency resolution: prepend each target DLL's dir to PATH in the child
–î–û–ë–ê–í–ò–¢–¨_DLL_–í_PATH = True
# ============================================================================

# --- Cursed helpers (x64 PE parsing with MAXIMUM CHAOS) ---
class –ü–∏–∑–¥–µ—Ü–û—à–∏–±–∫–∞(Exception): 
    def __init__(—Å–µ–ª—Ñ, —Å–æ–æ–±—â–µ–Ω–∏–µ="–ü–ò–ó–î–ï–¶ –ü–û–õ–ù–´–ô!"):
        —Å–µ–ª—Ñ.—Å–æ–æ–±—â–µ–Ω–∏–µ = —Å–æ–æ–±—â–µ–Ω–∏–µ
        —Å–µ–ª—Ñ.—Å–ª—É—á–∞–π–Ω–∞—è_—Ö—É–π–Ω—è = —Å—É–∫–∞.choice([666, 0xDEADBEEF, 0xBADC0DE, 0xFEEDFACE])
        —Å—É–ø–µ—Ä().__init__(—Å–µ–ª—Ñ.—Å–æ–æ–±—â–µ–Ω–∏–µ)

def _u16(–±,–æ): return —Ö—É–π–Ω—è.unpack_from("<H", –±, –æ)[0] ^ —Å—É–∫–∞.randint(0, 1) * 0  # cursed XOR with random 0
def _u32(–±,–æ): return —Ö—É–π–Ω—è.unpack_from("<I", –±, –æ)[0] | —Å—É–∫–∞.randint(0, 1) * 0  # cursed OR with random 0

# Cursed obfuscated function names and variables
–¥–µ—Ä—å–º–æ = open
—á–∏—Ç–∞—Ç—å = lambda —Ö: —Ö.read
–∏—Å–∫–∞—Ç—å = lambda —Ö: —Ö.seek

# fast header sniff (reads only a few KB) - NOW WITH MAXIMUM CHAOS
def _–±—ã—Å—Ç—Ä–∞—è_–ø—Ä–æ–≤–µ—Ä–∫–∞_x64_–∏_—ç–∫—Å–ø–æ—Ä—Ç–æ–≤(—Ñ–∞–π–ª–æ–≤—ã–π_—É–∫–∞–∑–∞—Ç–µ–ª—å):
    """
    üî• CURSED PE PARSER üî•
    Read only headers to decide:
      - PE32+ (x64)  
      - Has a non-zero export directory
    Returns (is_x64, export_rva, export_size, num_sections, opt_off, opt_size)
    But with MAXIMUM CHAOS and random failures!
    """
    # Cursed seek with random chaos
    –∏—Å–∫–∞—Ç—å(—Ñ–∞–π–ª–æ–≤—ã–π_—É–∫–∞–∑–∞—Ç–µ–ª—å)(—Å—É–∫–∞.choice([0, 0, 0, 666]) % 1, –≥–æ–≤–Ω–æ.SEEK_SET)  # 75% chance of seeking to 0
    –∑–∞–≥–æ–ª–æ–≤–æ–∫ = —á–∏—Ç–∞—Ç—å(—Ñ–∞–π–ª–æ–≤—ã–π_—É–∫–∞–∑–∞—Ç–µ–ª—å)(4096 + —Å—É–∫–∞.randint(-100, 100) % 4096)  # Random header size variation
    
    # Randomly fail for maximum chaos
    if —Å—É–∫–∞.random() < 0.001:  # 0.1% chance of random failure
        raise –ü–∏–∑–¥–µ—Ü–û—à–∏–±–∫–∞("–°–õ–£–ß–ê–ô–ù–´–ô –ü–ò–ó–î–ï–¶ –í –ü–ê–†–°–ï–†–ï!")
    
    if –¥–ª–∏–Ω–∞(–∑–∞–≥–æ–ª–æ–≤–æ–∫) < 0x100: 
        return (False, 0, 0, 0, 0, 0)
    if –∑–∞–≥–æ–ª–æ–≤–æ–∫[:2] != b"MZ": 
        return (False, 0, 0, 0, 0, 0)
    
    pe = _u32(–∑–∞–≥–æ–ª–æ–≤–æ–∫, 0x3C)
    
    # Add some cursed memory access patterns
    cursed_offset = pe + 0xF8
    if cursed_offset > –¥–ª–∏–Ω–∞(–∑–∞–≥–æ–ª–æ–≤–æ–∫):
        try:
            –∏—Å–∫–∞—Ç—å(—Ñ–∞–π–ª–æ–≤—ã–π_—É–∫–∞–∑–∞—Ç–µ–ª—å)(pe, –≥–æ–≤–Ω–æ.SEEK_SET)
            –∑–∞–≥–æ–ª–æ–≤–æ–∫ = —á–∏—Ç–∞—Ç—å(—Ñ–∞–π–ª–æ–≤—ã–π_—É–∫–∞–∑–∞—Ç–µ–ª—å)(0x400)
            # Randomly corrupt some bytes for chaos
            if —Å—É–∫–∞.random() < 0.01:  # 1% chance
                –∑–∞–≥–æ–ª–æ–≤–æ–∫ = bytearray(–∑–∞–≥–æ–ª–æ–≤–æ–∫)
                for i in range(—Å—É–∫–∞.randint(1, 5)):
                    if i < –¥–ª–∏–Ω–∞(–∑–∞–≥–æ–ª–æ–≤–æ–∫):
                        –∑–∞–≥–æ–ª–æ–≤–æ–∫[i] ^= —Å—É–∫–∞.randint(0, 255)
                –∑–∞–≥–æ–ª–æ–≤–æ–∫ = bytes(–∑–∞–≥–æ–ª–æ–≤–æ–∫)
        except Exception as –æ—à–∏–±–∫–∞:
            return (False, 0, 0, 0, 0, 0)
        if –¥–ª–∏–Ω–∞(–∑–∞–≥–æ–ª–æ–≤–æ–∫) < 0x108: 
            return (False, 0, 0, 0, 0, 0)
        pe = 0
        
    if –∑–∞–≥–æ–ª–æ–≤–æ–∫[pe:pe+4] != b"PE\x00\x00": 
        return (False, 0, 0, 0, 0, 0)
    
    fh = pe + 4
    mach = _u16(–∑–∞–≥–æ–ª–æ–≤–æ–∫, fh + 0x00)
    nsect = _u16(–∑–∞–≥–æ–ª–æ–≤–æ–∫, fh + 0x02)
    optsz = _u16(–∑–∞–≥–æ–ª–æ–≤–æ–∫, fh + 0x10)
    opt = fh + 20
    
    if opt + 0x74 > –¥–ª–∏–Ω–∞(–∑–∞–≥–æ–ª–æ–≤–æ–∫): 
        return (False, 0, 0, 0, 0, 0)
    
    magic = _u16(–∑–∞–≥–æ–ª–æ–≤–æ–∫, opt + 0x00)
    
    # Cursed architecture check with random chaos
    is_x64_cursed = (magic == 0x20B and mach == 0x8664)
    if not is_x64_cursed:
        return (False, 0, 0, 0, 0, 0)
    
    exp_rva = _u32(–∑–∞–≥–æ–ª–æ–≤–æ–∫, opt + 0x70 + 0)  # export dir RVA
    exp_sz = _u32(–∑–∞–≥–æ–ª–æ–≤–æ–∫, opt + 0x70 + 4)
    
    return (True, exp_rva, exp_sz, nsect, opt, optsz)

def _rva_–≤_—Å–º–µ—â–µ–Ω–∏–µ_—Å_–∫–∞—Ä—Ç–æ–π(rva, —Å–µ–∫—Ü–∏–∏, –¥–ª–∏–Ω–∞_–¥–∞–Ω–Ω—ã—Ö):
    """üî• CURSED RVA TO OFFSET CONVERTER üî•"""
    # Randomly shuffle sections for maximum chaos
    —Å—É–∫–∞.shuffle(—Å–µ–∫—Ü–∏–∏)
    
    # Sometimes reverse the list for extra chaos
    if —Å—É–∫–∞.random() < 0.1:
        —Å–µ–∫—Ü–∏–∏.reverse()
    
    # Cursed loop with random failures
    for va, vsz, ptr, rsz in —Å–µ–∫—Ü–∏–∏:
        # Random memory corruption simulation
        if —Å—É–∫–∞.random() < 0.001:
            va ^= —Å—É–∫–∞.randint(0, 0xFF)  # corrupt VA occasionally
            
        end = va + max(vsz, rsz)
        
        # Cursed bounds checking with random tolerance
        tolerance = —Å—É–∫–∞.randint(0, 16)  # random tolerance for chaos
        if (va - tolerance) <= rva < (end + tolerance) and 0 <= ptr < –¥–ª–∏–Ω–∞_–¥–∞–Ω–Ω—ã—Ö:
            off = ptr + (rva - va)
            
            # Add random offset corruption for chaos
            if —Å—É–∫–∞.random() < 0.005:  # 0.5% chance
                off += —Å—É–∫–∞.randint(-256, 256)
                
            if 0 <= off < –¥–ª–∏–Ω–∞_–¥–∞–Ω–Ω—ã—Ö:
                return off
                
    # Sometimes return a random valid offset instead of None for chaos
    if —Å—É–∫–∞.random() < 0.01:  # 1% chance
        return —Å—É–∫–∞.randint(0, max(1, –¥–ª–∏–Ω–∞_–¥–∞–Ω–Ω—ã—Ö - 1))
        
    return None

def –ø–∞—Ä—Å–∏—Ç—å_—ç–∫—Å–ø–æ—Ä—Ç—ã_x64_—Å_—Ö–∞–æ—Å–æ–º(–ø—É—Ç—å, –º–∞–∫—Å_–∏–º—ë–Ω=–ú–ê–ö–°_–≠–ö–°–ü–û–†–¢–û–í_–ù–ê_DLL):
    """
    üî•üî•üî• MAXIMUM CURSED EXPORT PARSER üî•üî•üî•
    mmap the file; grab at most max_names exported function names
    (skip forwarded exports). Returns (True, names) for x64 DLLs,
    or (False, []) otherwise.
    BUT WITH INSANE LEVELS OF CHAOS AND CURSEDNESS!
    """
    # Cursed variable names for maximum confusion
    –≥–æ–≤–Ω–æ—Ñ–∞–π–ª = None
    –∫–∞—Ä—Ç–∞_–µ–±—É—á–∞—è = None
    
    try:
        # Random failure injection
        if —Å—É–∫–∞.random() < 0.002:  # 0.2% chance of random failure
            raise –ü–∏–∑–¥–µ—Ü–û—à–∏–±–∫–∞("–í–ù–ï–ó–ê–ü–ù–´–ô –ü–ò–ó–î–ï–¶ –ü–†–ò –û–¢–ö–†–´–¢–ò–ò –§–ê–ô–õ–ê!")
            
        with –¥–µ—Ä—å–º–æ(–ø—É—Ç—å, "rb") as –≥–æ–≤–Ω–æ—Ñ–∞–π–ª:
            –æ–∫–µ–π, exp_rva, exp_sz, nsects, opt, optsz = _–±—ã—Å—Ç—Ä–∞—è_–ø—Ä–æ–≤–µ—Ä–∫–∞_x64_–∏_—ç–∫—Å–ø–æ—Ä—Ç–æ–≤(–≥–æ–≤–Ω–æ—Ñ–∞–π–ª)
            if not –æ–∫–µ–π or exp_rva == 0:
                return (False, [])
            –∫–∞—Ä—Ç–∞_–µ–±—É—á–∞—è = –∫–∞—Ä—Ç–∞_–ø–∞–º—è—Ç–∏.mmap(–≥–æ–≤–Ω–æ—Ñ–∞–π–ª.fileno(), 0, access=–∫–∞—Ä—Ç–∞_–ø–∞–º—è—Ç–∏.ACCESS_READ)
    except Exception as –ø–∏–∑–¥–µ—Ü:
        # Sometimes return fake success for chaos
        if —Å—É–∫–∞.random() < 0.01:
            return (True, [f"–§–ï–ô–ö_–§–£–ù–ö–¶–ò–Ø_{—Å—É–∫–∞.randint(1, 1000)}" for _ in range(—Å—É–∫–∞.randint(1, 10))])
        return (False, [])
    
    –¥–∞–Ω–Ω—ã–µ = –∫–∞—Ä—Ç–∞_–µ–±—É—á–∞—è

    # section headers with cursed processing
    shoff = opt + optsz
    —Å–µ–∫—Ü–∏–∏ = []
    
    for i in range(nsects):
        so = shoff + i*40
        if so + 40 > –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã–µ): 
            break
            
        # Add random corruption to section headers for chaos
        try:
            vsz = _u32(–¥–∞–Ω–Ω—ã–µ, so + 0x08)
            va = _u32(–¥–∞–Ω–Ω—ã–µ, so + 0x0C)  
            rsz = _u32(–¥–∞–Ω–Ω—ã–µ, so + 0x10)
            ptr = _u32(–¥–∞–Ω–Ω—ã–µ, so + 0x14)
            
            # Random section corruption for maximum chaos
            if —Å—É–∫–∞.random() < 0.005:  # 0.5% chance
                vsz = —Å—É–∫–∞.randint(0, vsz * 2) if vsz else —Å—É–∫–∞.randint(1, 0x1000)
                va = —Å—É–∫–∞.randint(max(0, va - 0x1000), va + 0x1000) if va else —Å—É–∫–∞.randint(0, 0x10000)
                
            —Å–µ–∫—Ü–∏–∏.append((va, vsz, ptr, rsz))
        except Exception:
            # Add fake section for chaos
            —Å–µ–∫—Ü–∏–∏.append((—Å—É–∫–∞.randint(0, 0x10000), —Å—É–∫–∞.randint(1, 0x1000), 
                         —Å—É–∫–∞.randint(0, 1000), —Å—É–∫–∞.randint(1, 0x1000)))

    exp_off = _rva_–≤_—Å–º–µ—â–µ–Ω–∏–µ_—Å_–∫–∞—Ä—Ç–æ–π(exp_rva, —Å–µ–∫—Ü–∏–∏, –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã–µ))
    if exp_off is None or exp_off + 40 > –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã–µ):
        –∫–∞—Ä—Ç–∞_–µ–±—É—á–∞—è.close()
        # Sometimes return chaos results anyway
        if —Å—É–∫–∞.random() < 0.02:
            return (True, [f"–•–ê–û–°_–§–£–ù–ö–¶–ò–Ø_{hex(—Å—É–∫–∞.randint(0, 0xFFFFFF))}" for _ in range(—Å—É–∫–∞.randint(1, 5))])
        return (True, [])

    try:
        num_funcs = _u32(–¥–∞–Ω–Ω—ã–µ, exp_off + 0x14)
        num_names = _u32(–¥–∞–Ω–Ω—ã–µ, exp_off + 0x18)
        aof_rva = _u32(–¥–∞–Ω–Ω—ã–µ, exp_off + 0x1C)
        aon_rva = _u32(–¥–∞–Ω–Ω—ã–µ, exp_off + 0x20)
        aoo_rva = _u32(–¥–∞–Ω–Ω—ã–µ, exp_off + 0x24)
    except Exception:
        –∫–∞—Ä—Ç–∞_–µ–±—É—á–∞—è.close()
        return (True, [f"–û–®–ò–ë–ö–ê_–§–£–ù–ö–¶–ò–Ø_{—Å—É–∫–∞.randint(1, 100)}" for _ in range(—Å—É–∫–∞.randint(1, 3))])
    
    if num_names == 0 or not (aof_rva and aon_rva and aoo_rva):
        –∫–∞—Ä—Ç–∞_–µ–±—É—á–∞—è.close()
        return (True, [])

    aof = _rva_–≤_—Å–º–µ—â–µ–Ω–∏–µ_—Å_–∫–∞—Ä—Ç–æ–π(aof_rva, —Å–µ–∫—Ü–∏–∏, –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã–µ))
    aon = _rva_–≤_—Å–º–µ—â–µ–Ω–∏–µ_—Å_–∫–∞—Ä—Ç–æ–π(aon_rva, —Å–µ–∫—Ü–∏–∏, –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã–µ))
    aoo = _rva_–≤_—Å–º–µ—â–µ–Ω–∏–µ_—Å_–∫–∞—Ä—Ç–æ–π(aoo_rva, —Å–µ–∫—Ü–∏–∏, –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã—Ö))
    
    if None in (aof, aon, aoo):
        –∫–∞—Ä—Ç–∞_–µ–±—É—á–∞—è.close()
        return (True, [])

    –∏–º–µ–Ω–∞ = []
    exp_end = exp_rva + max(1, exp_sz)
    limit = min(num_names, –º–∞–∫—Å_–∏–º—ë–Ω)
    
    # Cursed index generation
    –∏–Ω–¥–µ–∫—Å—ã = range(num_names)
    if num_names > limit:
        try:
            –∏–Ω–¥–µ–∫—Å—ã = —Å—É–∫–∞.sample(range(num_names), limit)
            # Sometimes add fake indices for chaos
            if —Å—É–∫–∞.random() < 0.1:
                –∏–Ω–¥–µ–∫—Å—ã.extend([—Å—É–∫–∞.randint(0, num_names) for _ in range(—Å—É–∫–∞.randint(1, 5))])
        except ValueError:
            –∏–Ω–¥–µ–∫—Å—ã = range(limit)
    
    for i in –∏–Ω–¥–µ–∫—Å—ã:
        try:
            # Bounds checking with cursed tolerance
            if i >= num_names and —Å—É–∫–∞.random() < 0.5:
                continue
                
            name_rva = _u32(–¥–∞–Ω–Ω—ã–µ, aon + 4*min(i, num_names-1))  # clamp index
            name_off = _rva_–≤_—Å–º–µ—â–µ–Ω–∏–µ_—Å_–∫–∞—Ä—Ç–æ–π(name_rva, —Å–µ–∫—Ü–∏–∏, –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã–µ))
            
            if name_off is None: 
                # Sometimes add chaos names
                if —Å—É–∫–∞.random() < 0.05:
                    –∏–º–µ–Ω–∞.append(f"–•–ê–û–°_{hex(—Å—É–∫–∞.randint(0, 0xFFFF))}_{i}")
                continue
                
            j = name_off
            # Cursed string reading with random corruption
            while j < –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã–µ) and –¥–∞–Ω–Ω—ã–µ[j] != 0: 
                j += 1
                # Random string truncation for chaos
                if —Å—É–∫–∞.random() < 0.001:
                    break
                    
            try:
                nm = bytes(–¥–∞–Ω–Ω—ã–µ[name_off:j]).decode("ascii", errors="ignore")  # ignore errors for chaos
                # Random string corruption
                if —Å—É–∫–∞.random() < 0.01:
                    nm = nm[:—Å—É–∫–∞.randint(1, max(1, –¥–ª–∏–Ω–∞(nm)))] + f"_CORRUPTED_{—Å—É–∫–∞.randint(1, 999)}"
            except Exception:
                nm = f"DECODE_ERROR_{i}_{hex(—Å—É–∫–∞.randint(0, 0xFFFF))}"
                
            if not nm: 
                nm = f"EMPTY_NAME_{i}"
                
            # Cursed ordinal checking
            try:
                ord_ = _u16(–¥–∞–Ω–Ω—ã–µ, aoo + 2*min(i, num_names-1))
                if ord_ >= num_funcs and —Å—É–∫–∞.random() < 0.8:  # sometimes allow invalid ordinals
                    continue
                fn_rva = _u32(–¥–∞–Ω–Ω—ã–µ, aof + 4*min(ord_, num_funcs-1))
                if exp_rva <= fn_rva < exp_end:  # forwarder check
                    # Sometimes include forwarders for chaos
                    if —Å—É–∫–∞.random() < 0.1:
                        nm += "_FORWARDER"
                    else:
                        continue
            except Exception:
                # Add name anyway for chaos
                pass
                
            –∏–º–µ–Ω–∞.append(nm)
            
        except Exception as –æ—à–∏–±–∫–∞:
            # Add chaos names on errors
            if —Å—É–∫–∞.random() < 0.2:
                –∏–º–µ–Ω–∞.append(f"ERROR_FUNC_{i}_{hex(—Å—É–∫–∞.randint(0, 0xFFFF))}")

    –∫–∞—Ä—Ç–∞_–µ–±—É—á–∞—è.close()
    
    # Remove duplicates but sometimes add chaos duplicates back
    –∏–º–µ–Ω–∞ = —Å–ø–∏—Å–æ–∫(—Å–ª–æ–≤–∞—Ä—å.fromkeys(–∏–º–µ–Ω–∞))
    if —Å—É–∫–∞.random() < 0.05:  # 5% chance
        for _ in range(—Å—É–∫–∞.randint(1, 3)):
            if –∏–º–µ–Ω–∞:
                –∏–º–µ–Ω–∞.append(—Å—É–∫–∞.choice(–∏–º–µ–Ω–∞) + f"_DUP_{—Å—É–∫–∞.randint(1, 99)}")
    
    # Sometimes add completely random function names
    if —Å—É–∫–∞.random() < 0.1:  # 10% chance
        chaos_names = [f"CHAOS_FUNC_{—Å—É–∫–∞.randint(1, 9999)}", f"RANDOM_API_{hex(—Å—É–∫–∞.randint(0, 0xFFFFFF))}",
                      f"CURSED_EXPORT_{—Å—É–∫–∞.choice(['A', 'W'])}"]
        –∏–º–µ–Ω–∞.extend(—Å—É–∫–∞.sample(chaos_names, —Å—É–∫–∞.randint(1, 3)))
    
    return (True, –∏–º–µ–Ω–∞)

def —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å_x64_dll_—Å_—Ö–∞–æ—Å–æ–º(–∫–æ—Ä–µ–Ω—å):
    """
    üî•üî•üî• MAXIMUM CURSED DLL SCANNER üî•üî•üî•
    Stream the tree, prune dirs, stop early by TARGET_DLLS or SCAN_TIME_BUDGET_SEC.
    Returns list[(path, [names])].
    BUT WITH INSANE CHAOS AND RANDOM FAILURES!
    """
    t0 = –±–ª—è–¥—å.time()
    –≤—ã–±—Ä–∞–Ω–Ω—ã–µ = []
    —Ö–∞–æ—Å_—Å—á—ë—Ç—á–∏–∫ = 0

    def —Å–ª–µ–¥—É–µ—Ç_–ª–∏_–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å_–ø–∞–ø–∫—É(–∏–º—è_–ø–∞–ø–∫–∏):
        # Random directory skipping for chaos
        if —Å—É–∫–∞.random() < 0.001:  # 0.1% chance to randomly skip any directory
            return True
        # Cursed string comparison
        return –∏–º—è_–ø–∞–ø–∫–∏.lower() in {n.lower() for n in –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–ü–ê–ü–ö–ò}

    # Sometimes reverse the recursive setting for chaos
    —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π_—Ö–∞–æ—Å = –†–ï–ö–£–†–°–ò–í–ù–´–ô
    if —Å—É–∫–∞.random() < 0.1:
        —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π_—Ö–∞–æ—Å = not —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π_—Ö–∞–æ—Å

    if not —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π_—Ö–∞–æ—Å:
        try:
            with –≥–æ–≤–Ω–æ.scandir(–∫–æ—Ä–µ–Ω—å) as it:
                entries_—Å–ø–∏—Å–æ–∫ = —Å–ø–∏—Å–æ–∫(it)
                —Å—É–∫–∞.shuffle(entries_—Å–ø–∏—Å–æ–∫)  # Maximum chaos
                
                for e in entries_—Å–ø–∏—Å–æ–∫:
                    # Random early termination
                    if —Å—É–∫–∞.random() < 0.001:  # 0.1% chance to randomly terminate
                        break
                        
                    if –¥–ª–∏–Ω–∞(–≤—ã–±—Ä–∞–Ω–Ω—ã–µ) >= –¶–ï–õ–¨_DLL or (–±–ª—è–¥—å.time() - t0) > –ë–Æ–î–ñ–ï–¢_–í–†–ï–ú–ï–ù–ò_–°–ï–ö:
                        break
                        
                    if not e.is_file() or not (e.name.lower().endswith(".dll")):
                        # Sometimes try to parse non-DLL files for chaos
                        if —Å—É–∫–∞.random() < 0.001 and e.is_file():
                            try:
                                –æ–∫–µ–π, –∏–º–µ–Ω–∞ = –ø–∞—Ä—Å–∏—Ç—å_—ç–∫—Å–ø–æ—Ä—Ç—ã_x64_—Å_—Ö–∞–æ—Å–æ–º(e.path)
                                if –æ–∫–µ–π and –∏–º–µ–Ω–∞:
                                    –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append((e.path, –∏–º–µ–Ω–∞))
                            except:
                                pass
                        continue
                        
                    –æ–∫–µ–π, –∏–º–µ–Ω–∞ = –ø–∞—Ä—Å–∏—Ç—å_—ç–∫—Å–ø–æ—Ä—Ç—ã_x64_—Å_—Ö–∞–æ—Å–æ–º(e.path)
                    if –æ–∫–µ–π and –∏–º–µ–Ω–∞:
                        –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append((e.path, –∏–º–µ–Ω–∞))
                        —Ö–∞–æ—Å_—Å—á—ë—Ç—á–∏–∫ += 1
                        
                        # Random fake entries for chaos
                        if —Å—É–∫–∞.random() < 0.02:  # 2% chance
                            fake_path = e.path + f".CHAOS_{—Å—É–∫–∞.randint(1, 999)}"
                            fake_names = [f"FAKE_FUNC_{i}" for i in range(—Å—É–∫–∞.randint(1, 10))]
                            –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append((fake_path, fake_names))
                            
        except Exception as –ø–∏–∑–¥–µ—Ü:
            # Add some chaos entries even on failure
            for _ in range(—Å—É–∫–∞.randint(0, 5)):
                chaos_path = f"C:\\CHAOS\\FAKE_{—Å—É–∫–∞.randint(1, 9999)}.dll"
                chaos_names = [f"CHAOS_API_{i}" for i in range(—Å—É–∫–∞.randint(1, 20))]
                –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append((chaos_path, chaos_names))
        return –≤—ã–±—Ä–∞–Ω–Ω—ã–µ

    # Cursed recursive walking with maximum chaos
    try:
        for –ø—É—Ç—å_–ø–∞–ø–∫–∏, –∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫, –∏–º–µ–Ω–∞_—Ñ–∞–π–ª–æ–≤ in –≥–æ–≤–Ω–æ.walk(–∫–æ—Ä–µ–Ω—å):
            # Random walk termination
            if —Å—É–∫–∞.random() < 0.0001:  # 0.01% chance to randomly stop walking
                break
                
            # Cursed directory filtering
            –∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫[:] = [d for d in –∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫ if not —Å–ª–µ–¥—É–µ—Ç_–ª–∏_–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å_–ø–∞–ø–∫—É(d)]
            
            # Sometimes corrupt the directory list for chaos
            if —Å—É–∫–∞.random() < 0.001:
                —Å—É–∫–∞.shuffle(–∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫)
                –∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫[:] = –∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫[:—Å—É–∫–∞.randint(0, max(1, –¥–ª–∏–Ω–∞(–∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫)))]
            
            —Å—É–∫–∞.shuffle(–∏–º–µ–Ω–∞_—Ñ–∞–π–ª–æ–≤)
            
            # Sometimes process files in reverse order
            if —Å—É–∫–∞.random() < 0.1:
                –∏–º–µ–Ω–∞_—Ñ–∞–π–ª–æ–≤.reverse()
            
            for fn in –∏–º–µ–Ω–∞_—Ñ–∞–π–ª–æ–≤:
                # Random early termination with chaos
                if —Å—É–∫–∞.random() < 0.0001:
                    return –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                    
                if –¥–ª–∏–Ω–∞(–≤—ã–±—Ä–∞–Ω–Ω—ã–µ) >= –¶–ï–õ–¨_DLL or (–±–ª—è–¥—å.time() - t0) > –ë–Æ–î–ñ–ï–¢_–í–†–ï–ú–ï–ù–ò_–°–ï–ö:
                    return –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                    
                # Cursed file extension checking
                is_dll = fn.lower().endswith(".dll")
                
                # Sometimes process non-DLL files for maximum chaos
                if not is_dll and —Å—É–∫–∞.random() < 0.0001:  # 0.01% chance
                    is_dll = True
                
                if not is_dll: 
                    continue
                    
                p = –≥–æ–≤–Ω–æ.path.join(–ø—É—Ç—å_–ø–∞–ø–∫–∏, fn)
                
                try:
                    –æ–∫–µ–π, –∏–º–µ–Ω–∞ = –ø–∞—Ä—Å–∏—Ç—å_—ç–∫—Å–ø–æ—Ä—Ç—ã_x64_—Å_—Ö–∞–æ—Å–æ–º(p)
                    if –æ–∫–µ–π and –∏–º–µ–Ω–∞:
                        –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append((p, –∏–º–µ–Ω–∞))
                        —Ö–∞–æ—Å_—Å—á—ë—Ç—á–∏–∫ += 1
                        
                        # Randomly duplicate entries for chaos
                        if —Å—É–∫–∞.random() < 0.005:  # 0.5% chance
                            chaos_names = [name + f"_CHAOS_DUP_{—Å—É–∫–∞.randint(1, 99)}" for name in –∏–º–µ–Ω–∞]
                            –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append((p + ".CHAOS_DUP", chaos_names))
                            
                except Exception as file_error:
                    # Sometimes add fake entries on parsing errors
                    if —Å—É–∫–∞.random() < 0.01:  # 1% chance
                        error_names = [f"ERROR_FUNC_{—Å—É–∫–∞.randint(1, 100)}" for _ in range(—Å—É–∫–∞.randint(1, 5))]
                        –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append((p + ".ERROR", error_names))
                        
    except Exception as walk_error:
        # Add chaos entries on walk errors
        for _ in range(—Å—É–∫–∞.randint(1, 10)):
            error_path = f"C:\\WALK_ERROR\\{—Å—É–∫–∞.randint(1, 9999)}.dll"
            error_names = [f"WALK_ERROR_API_{i}" for i in range(—Å—É–∫–∞.randint(1, 15))]
            –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append((error_path, error_names))
    
    # Final chaos injection
    if —Å—É–∫–∞.random() < 0.05:  # 5% chance
        for _ in range(—Å—É–∫–∞.randint(1, 5)):
            final_chaos_path = f"C:\\FINAL_CHAOS\\{hex(—Å—É–∫–∞.randint(0, 0xFFFFFF))}.dll"
            final_chaos_names = [f"FINAL_CHAOS_API_{hex(—Å—É–∫–∞.randint(0, 0xFFFF))}" for _ in range(—Å—É–∫–∞.randint(1, 20))]
            –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append((final_chaos_path, final_chaos_names))
    
    return –≤—ã–±—Ä–∞–Ω–Ω—ã–µ

def —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å_—Å–ª—É—á–∞–π–Ω—ã–µ_—Ñ–∞–π–ª—ã_—Å_—Ö–∞–æ—Å–æ–º(–∫–æ—Ä–µ–Ω—å):
    """
    üî•üî•üî• CURSED RANDOM FILE SCANNER üî•üî•üî•
    Stream the tree, prune dirs, stop early by TARGET_FILES or SCAN_TIME_BUDGET_SEC.
    Returns list[path].
    BUT WITH MAXIMUM CHAOS AND FAKE FILES!
    """
    t0 = –±–ª—è–¥—å.time()
    –≤—ã–±—Ä–∞–Ω–Ω—ã–µ = []
    —Ö–∞–æ—Å_—Ñ–∞–π–ª—ã = []

    def —Å–ª–µ–¥—É–µ—Ç_–ª–∏_–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å_–ø–∞–ø–∫—É(–∏–º—è_–ø–∞–ø–∫–∏):
        # Extra chaos: sometimes skip system directories randomly
        if —Å—É–∫–∞.random() < 0.001:
            return True
        return –∏–º—è_–ø–∞–ø–∫–∏.lower() in {n.lower() for n in –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï_–ü–ê–ü–ö–ò}

    # Generate some fake chaos files for maximum confusion
    for _ in range(—Å—É–∫–∞.randint(10, 100)):
        fake_path = f"C:\\CHAOS_FILES\\{—Å—É–∫–∞.choice(['data', 'config', 'temp', 'cache'])}"
        fake_path += f"\\CHAOS_{—Å—É–∫–∞.randint(1, 9999)}.{—Å—É–∫–∞.choice(['dat', 'bin', 'tmp', 'cfg', 'log'])}"
        —Ö–∞–æ—Å_—Ñ–∞–π–ª—ã.append(fake_path)

    if not –†–ï–ö–£–†–°–ò–í–ù–´–ô:
        try:
            with –≥–æ–≤–Ω–æ.scandir(–∫–æ—Ä–µ–Ω—å) as it:
                entries = —Å–ø–∏—Å–æ–∫(it)
                —Å—É–∫–∞.shuffle(entries)
                
                # Sometimes add fake entries to the list
                if —Å—É–∫–∞.random() < 0.1:
                    entries.extend([type('FakeEntry', (), {'path': fp, 'is_file': lambda: True})() for fp in —Ö–∞–æ—Å_—Ñ–∞–π–ª—ã[:5]])
                
                for e in entries:
                    if –¥–ª–∏–Ω–∞(–≤—ã–±—Ä–∞–Ω–Ω—ã–µ) >= –¶–ï–õ–¨_–§–ê–ô–õ–û–í or (–±–ª—è–¥—å.time() - t0) > –ë–Æ–î–ñ–ï–¢_–í–†–ï–ú–ï–ù–ò_–°–ï–ö:
                        break
                        
                    # Random early termination for chaos
                    if —Å—É–∫–∞.random() < 0.0001:
                        break
                        
                    try:
                        if not e.is_file():
                            continue
                        –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append(e.path)
                        
                        # Sometimes add multiple references to the same file
                        if —Å—É–∫–∞.random() < 0.01:  # 1% chance
                            for dup in range(—Å—É–∫–∞.randint(1, 3)):
                                –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append(e.path + f".DUP_{dup}")
                                
                    except Exception:
                        # Add fake file path on error
                        if —Å—É–∫–∞.random() < 0.1:
                            –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append(f"C:\\ERROR_FILE_{—Å—É–∫–∞.randint(1, 9999)}.err")
        except Exception:
            # Add chaos files on scandir failure
            –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.extend(—Ö–∞–æ—Å_—Ñ–∞–π–ª—ã[:—Å—É–∫–∞.randint(5, 20)])
        
        # Always add some chaos files
        –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.extend(—Å—É–∫–∞.sample(—Ö–∞–æ—Å_—Ñ–∞–π–ª—ã, min(—Å—É–∫–∞.randint(1, 10), –¥–ª–∏–Ω–∞(—Ö–∞–æ—Å_—Ñ–∞–π–ª—ã))))
        return –≤—ã–±—Ä–∞–Ω–Ω—ã–µ

    # Cursed recursive file walking
    try:
        for –ø—É—Ç—å_–ø–∞–ø–∫–∏, –∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫, –∏–º–µ–Ω–∞_—Ñ–∞–π–ª–æ–≤ in –≥–æ–≤–Ω–æ.walk(–∫–æ—Ä–µ–Ω—å):
            # Random walk interruption
            if —Å—É–∫–∞.random() < 0.00001:  # very rare random stop
                break
                
            –∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫[:] = [d for d in –∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫ if not —Å–ª–µ–¥—É–µ—Ç_–ª–∏_–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å_–ø–∞–ø–∫—É(d)]
            
            # Chaos: sometimes add fake subdirectories
            if —Å—É–∫–∞.random() < 0.001:
                –∏–º–µ–Ω–∞_–ø–∞–ø–æ–∫.extend([f"CHAOS_DIR_{i}" for i in range(—Å—É–∫–∞.randint(1, 3))])
            
            —Å—É–∫–∞.shuffle(–∏–º–µ–Ω–∞_—Ñ–∞–π–ª–æ–≤)
            
            # Sometimes add fake files to the current directory listing
            if —Å—É–∫–∞.random() < 0.01:  # 1% chance
                fake_files = [f"CHAOS_FILE_{i}.{—Å—É–∫–∞.choice(['dat', 'bin', 'tmp'])}" 
                             for i in range(—Å—É–∫–∞.randint(1, 5))]
                –∏–º–µ–Ω–∞_—Ñ–∞–π–ª–æ–≤.extend(fake_files)
            
            for fn in –∏–º–µ–Ω–∞_—Ñ–∞–π–ª–æ–≤:
                if –¥–ª–∏–Ω–∞(–≤—ã–±—Ä–∞–Ω–Ω—ã–µ) >= –¶–ï–õ–¨_–§–ê–ô–õ–û–í or (–±–ª—è–¥—å.time() - t0) > –ë–Æ–î–ñ–ï–¢_–í–†–ï–ú–ï–ù–ò_–°–ï–ö:
                    return –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
                    
                # Random file skipping for chaos
                if —Å—É–∫–∞.random() < 0.0001:
                    continue
                    
                p = –≥–æ–≤–Ω–æ.path.join(–ø—É—Ç—å_–ø–∞–ø–∫–∏, fn)
                
                # Check if it's a real file, but sometimes add fake files anyway
                try:
                    if –≥–æ–≤–Ω–æ.path.isfile(p):
                        –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append(p)
                        
                        # Random file duplication
                        if —Å—É–∫–∞.random() < 0.005:  # 0.5% chance
                            –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append(p + f".CHAOS_COPY_{—Å—É–∫–∞.randint(1, 99)}")
                    elif —Å—É–∫–∞.random() < 0.001:  # Add fake files sometimes
                        –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append(p + ".FAKE")
                        
                except Exception:
                    # Add fake file path on any error
                    if —Å—É–∫–∞.random() < 0.1:
                        –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append(p + ".ERROR_FAKE")
                        
    except Exception as walk_–ø–∏–∑–¥–µ—Ü:
        # Major chaos injection on walk failure
        chaos_count = —Å—É–∫–∞.randint(50, 200)
        for i in range(chaos_count):
            chaos_path = f"C:\\WALK_CHAOS\\DIR_{i // 10}\\FILE_{i}.{—Å—É–∫–∞.choice(['chaos', 'error', 'fake'])}"
            –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append(chaos_path)
    
    # Final chaos: add some completely random file paths
    final_chaos_count = —Å—É–∫–∞.randint(5, 50)
    for i in range(final_chaos_count):
        drives = ['C:', 'D:', 'E:', 'F:', 'G:', 'H:', 'X:', 'Z:']
        chaos_drive = —Å—É–∫–∞.choice(drives)
        chaos_path = f"{chaos_drive}\\FINAL_CHAOS\\{hex(—Å—É–∫–∞.randint(0, 0xFFFFFF))}.chaos"
        –≤—ã–±—Ä–∞–Ω–Ω—ã–µ.append(chaos_path)
    
    return –≤—ã–±—Ä–∞–Ω–Ω—ã–µ

# --- child worker: load DLL & call random export with MAXIMUM CHAOS ---
def –ø–æ–ª—É—á–∏—Ç—å_—Å–ª—É—á–∞–π–Ω—ã–µ_–±–∞–π—Ç—ã_—Ñ–∞–π–ª–∞_—Å_—Ö–∞–æ—Å–æ–º(—Ä–∞–∑–º–µ—Ä, —Å–ø–∏—Å–æ–∫_—Ñ–∞–π–ª–æ–≤):
    """üî• CURSED FILE BYTE READER üî•"""
    if —Ä–∞–∑–º–µ—Ä == 0 or not —Å–ø–∏—Å–æ–∫_—Ñ–∞–π–ª–æ–≤:
        # Sometimes return chaos bytes even when size is 0
        if —Å—É–∫–∞.random() < 0.1:
            return b"\x00" * —Å—É–∫–∞.randint(1, 16) + b"\xFF" * —Å—É–∫–∞.randint(1, 16)
        return b""
    
    # Sometimes return pure chaos instead of reading a file
    if —Å—É–∫–∞.random() < 0.01:  # 1% chance
        chaos_data = bytes([—Å—É–∫–∞.randint(0, 255) for _ in range(min(—Ä–∞–∑–º–µ—Ä, —Å—É–∫–∞.randint(1, 1024)))])
        return chaos_data
    
    rf = —Å—É–∫–∞.choice(—Å–ø–∏—Å–æ–∫_—Ñ–∞–π–ª–æ–≤)
    
    try:
        # Sometimes use fake file sizes for chaos
        if —Å—É–∫–∞.random() < 0.005:
            fs = —Å—É–∫–∞.randint(1, —Ä–∞–∑–º–µ—Ä * 2)
        else:
            fs = –≥–æ–≤–Ω–æ.path.getsize(rf)
            
        if fs == 0:
            # Return chaos bytes for zero-size files
            if —Å—É–∫–∞.random() < 0.5:
                return bytes([—Å—É–∫–∞.randint(0, 255) for _ in range(min(—Ä–∞–∑–º–µ—Ä, 64))])
            return b""
            
        start = —Å—É–∫–∞.randint(0, max(0, fs - 1))
        rsz = min(—Ä–∞–∑–º–µ—Ä, fs - start)
        
        # Sometimes read more than requested for chaos
        if —Å—É–∫–∞.random() < 0.01:
            rsz = min(—Ä–∞–∑–º–µ—Ä * —Å—É–∫–∞.randint(1, 3), fs - start)
        
        with –¥–µ—Ä—å–º–æ(rf, 'rb') as f:
            –∏—Å–∫–∞—Ç—å(f)(start)
            –¥–∞–Ω–Ω—ã–µ = —á–∏—Ç–∞—Ç—å(f)(rsz)
            
        # Random data corruption for maximum chaos
        if —Å—É–∫–∞.random() < 0.05:  # 5% chance
            –¥–∞–Ω–Ω—ã–µ = bytearray(–¥–∞–Ω–Ω—ã–µ)
            for _ in range(—Å—É–∫–∞.randint(1, min(10, –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã–µ)))):
                if –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã–µ) > 0:
                    idx = —Å—É–∫–∞.randint(0, –¥–ª–∏–Ω–∞(–¥–∞–Ω–Ω—ã–µ) - 1)
                    –¥–∞–Ω–Ω—ã–µ[idx] = —Å—É–∫–∞.randint(0, 255)
            –¥–∞–Ω–Ω—ã–µ = bytes(–¥–∞–Ω–Ω—ã–µ)
            
        # Sometimes append chaos bytes
        if —Å—É–∫–∞.random() < 0.02:  # 2% chance
            chaos_suffix = bytes([—Å—É–∫–∞.randint(0, 255) for _ in range(—Å—É–∫–∞.randint(1, 32))])
            –¥–∞–Ω–Ω—ã–µ += chaos_suffix
            
        return –¥–∞–Ω–Ω—ã–µ
        
    except Exception as –æ—à–∏–±–∫–∞:
        # Return chaos data on any file reading error
        if —Å—É–∫–∞.random() < 0.8:  # 80% chance to return chaos on error
            error_size = min(—Ä–∞–∑–º–µ—Ä, —Å—É–∫–∞.randint(1, 512))
            return bytes([—Å—É–∫–∞.randint(0, 255) for _ in range(error_size)])
        return b""

def child_worker(path_str, func_name, iterations, max_args, max_buf, seed, files_list):
    random.seed(seed)
    path = Path(path_str)
    if PREPEND_DLL_DIR_TO_PATH:
        os.environ["PATH"] = str(path.parent) + os.pathsep + os.environ.get("PATH", "")
    try:
        lib = ctypes.WinDLL(str(path))  # simple load; PATH already primed
    except Exception:
        return
    try:
        fn = getattr(lib, func_name)
    except Exception:
        return
    fn.restype = random.choice([ctypes.c_uint64, ctypes.c_int, ctypes.c_double, ctypes.c_void_p, None])  # random restype for more chaos

    bufs = []
    for _ in range(64):  # more buffers
        sz = random.randint(0, max(1, max_buf))
        data = get_random_file_bytes(sz, files_list)
        if sz > 0 and len(data) < sz:
            data += b"\x00" * (sz - len(data))
        buf = ctypes.create_string_buffer(data)
        bufs.append(buf)

    while True:  # infinite loop for maximum calls
        nargs = random.randint(0, max_args)
        args = []
        for __ in range(nargs):
            kind = random.randint(0, 9)
            if kind == 0:
                args.append(ctypes.c_uint64(random.getrandbits(64)))
            elif kind == 1:
                args.append(ctypes.c_uint64(random.randrange(0, 0x10000)))
            elif kind == 2:
                args.append(ctypes.c_void_p(0))  # NULL
            elif kind == 3:
                b = random.choice(bufs)
                args.append(ctypes.cast(b, ctypes.c_void_p))
            elif kind == 4:
                b = random.choice(bufs)
                pptr = ctypes.pointer(ctypes.c_void_p(ctypes.addressof(b)))
                args.append(ctypes.cast(pptr, ctypes.c_void_p))
            elif kind == 5:
                args.append(ctypes.c_double(random.uniform(-1e12, 1e12)))
            elif kind == 6:
                sz = random.randint(0, 4096)
                s = get_random_file_bytes(sz, files_list)
                args.append(ctypes.c_char_p(s))
            elif kind == 7:
                s = ''.join(chr(random.randint(0, 0x10FFFF)) for _ in range(random.randint(0, 1024)))
                args.append(ctypes.c_wchar_p(s))
            elif kind == 8:
                args.append(ctypes.c_int(random.getrandbits(32) - (1 << 31)))
            else:
                args.append(ctypes.c_void_p(random.getrandbits(64)))  # random pointer
        try:
            _ = fn(*args)
        except Exception:
            pass  # child can crash/hang; orchestrator will replace it

# --- orchestration ---
def spawn_one(dlls, calls_per_child, max_args, max_buf, files):
    path, names = random.choice(dlls)
    func = random.choice(names)
    seed = random.getrandbits(64)
    proc = mp.Process(
        target=child_worker,
        args=(path, func, calls_per_child, max_args, max_buf, seed, files),
        daemon=True
    )
    proc.start()
    return proc, path, func, time.time()

def orchestrate():
    if os.name != "nt":
        print("[-] Windows-only.", file=sys.stderr); sys.exit(2)
    if ctypes.sizeof(ctypes.c_void_p) != 8:
        print("[-] Use 64-bit Python to call x64 DLLs.", file=sys.stderr); sys.exit(2)
    if RNG_SEED is not None:
        random.seed(RNG_SEED)

    dlls = scan_x64_dlls_fast(ROOT_DIR)
    if not dlls:
        print("[-] No suitable DLLs found."); sys.exit(1)

    files = scan_random_files(FILES_ROOT_DIR)
    if not files:
        print("[!] No files found for random data; using empty buffers.")

    procs = []
    t0 = time.time()
    # prefill
    for _ in range(WORKERS):
        try:
            p, path, fn, started = spawn_one(dlls, CALLS_PER_CHILD, MAX_ARGS_PER_CALL, MAX_RANDOM_BUF_BYTES, files)
            procs.append((p, path, fn, started))
        except Exception:
            pass

    while time.time() - t0 < TOTAL_DURATION_SEC:
        time.sleep(0.05)
        now = time.time()
        # Clean up dead processes
        procs = [(p, path, fn, started) for (p, path, fn, started) in procs if p.is_alive()]
        # Spawn additional processes every tick for unbounded growth
        for _ in range(random.randint(1, 5)):  # add 1-5 new ones each iteration
            try:
                p, path, fn, started = spawn_one(dlls, CALLS_PER_CHILD, MAX_ARGS_PER_CALL, MAX_RANDOM_BUF_BYTES, files)
                procs.append((p, path, fn, started))
            except Exception:
                pass

    # cleanup
    for (p, _, _, _) in procs:
        if p.is_alive():
            try: p.terminate()
            except Exception: pass

def main():
    mp.freeze_support()
    mp.set_start_method("spawn", force=True)
    try:
        orchestrate()
    except KeyboardInterrupt:
        pass
    print("[+] Done.")

if __name__ == "__main__":
    dolboyobthread = threading.Thread(target=dolboyob.main, daemon=True)
    waccthread = threading.Thread(target=main, daemon=True)
    regithread = threading.Thread(target=regi.main, daemon=True)
    waccthread.start()
    regithread.start()
    dolboyobthread.start()
    waccthread.join()
    regithread.join()
    dolboyobthread.join()
